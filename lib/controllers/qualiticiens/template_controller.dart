import 'package:get/get.dart';
import 'package:flutter/material.dart';
import '../../services/core/template_by_activite_specifique_service.dart';
import '../../models/core/template_model.dart';

/// Controller optimis√© pour la gestion des templates fiche contr√¥le
/// G√®re les templates li√©s √† une activit√© sp√©cifique
/// Inclut les op√©rations CRUD compl√®tes et la gestion d'√©tat avanc√©e
class TemplateController extends GetxController {
  // Services
  final TemplateFichecontroleByActiviteSpecifiqueService _templateService = Get.find<TemplateFichecontroleByActiviteSpecifiqueService>();

  // √âtat des donn√©es
  final _templates = <TemplateFichecontrole>[].obs;
  final _isLoading = false.obs;
  final _errorMessage = ''.obs;
  final _hasError = false.obs;
  final _isCreating = false.obs;
  final _isUpdating = false.obs;
  final _isDeleting = false.obs;

  // √âtat de s√©lection de l'activit√© sp√©cifique
  final _selectedActiviteSpecifiqueId = Rx<int?>(null);
  final _selectedActiviteSpecifiqueTitre = ''.obs;

  // √âtat du template s√©lectionn√©
  final _selectedTemplate = Rx<TemplateFichecontrole?>(null);

  // √âtat de filtrage et recherche
  final _searchQuery = ''.obs;
  final _selectedTypeFilter = Rx<TypeTemplate?>(null);

  // Getters pour l'acc√®s aux donn√©es
  List<TemplateFichecontrole> get templates => _templates;
  List<TemplateFichecontrole> get filteredTemplates => _getFilteredTemplates();
  bool get isLoading => _isLoading.value;
  bool get isCreating => _isCreating.value;
  bool get isUpdating => _isUpdating.value;
  bool get isDeleting => _isDeleting.value;
  bool get isPerformingAction => isCreating || isUpdating || isDeleting;
  String get errorMessage => _errorMessage.value;
  bool get hasError => _hasError.value;
  bool get hasData => _templates.isNotEmpty;
  bool get hasFilteredData => filteredTemplates.isNotEmpty;
  int? get selectedActiviteSpecifiqueId => _selectedActiviteSpecifiqueId.value;
  String get selectedActiviteSpecifiqueTitre => _selectedActiviteSpecifiqueTitre.value;
  TemplateFichecontrole? get selectedTemplate => _selectedTemplate.value;
  String get searchQuery => _searchQuery.value;
  TypeTemplate? get selectedTypeFilter => _selectedTypeFilter.value;

  // Statistiques
  int get totalTemplates => _templates.length;
  int get pdfTemplatesCount => _templates.where((t) => t.typeTemplate == TypeTemplate.pdf).length;
  int get docxTemplatesCount => _templates.where((t) => t.typeTemplate == TypeTemplate.docx).length;
  int get totalQuantity => _templates.fold(0, (sum, t) => sum + t.quantite);

  @override
  void onInit() {
    super.onInit();
    _initializeFromArguments();
    _loadInitialData();
  }

  /// Initialise les donn√©es √† partir des arguments de navigation
  void _initializeFromArguments() {
    final arguments = Get.arguments;
    if (arguments != null && arguments is Map<String, dynamic>) {
      _selectedActiviteSpecifiqueId.value = arguments['activiteSpecifiqueId'];
      _selectedActiviteSpecifiqueTitre.value = arguments['activiteSpecifiqueTitre'] ?? '';
    }
  }

  /// Charge les donn√©es initiales
  Future<void> _loadInitialData() async {
    if (_selectedActiviteSpecifiqueId.value != null) {
      await fetchTemplatesByActiviteSpecifique(_selectedActiviteSpecifiqueId.value!);
    }
  }

  /// R√©cup√®re les templates pour une activit√© sp√©cifique
  Future<void> fetchTemplatesByActiviteSpecifique(int activiteSpecifiqueId) async {
    try {
      _setLoadingState(true);
      _clearError();

      debugPrint('üîç R√©cup√©ration templates pour activit√© sp√©cifique $activiteSpecifiqueId');
      
      final responseData = await _templateService.getTemplatesByActiviteSpecifique(activiteSpecifiqueId);
      
      debugPrint('üìä Donn√©es re√ßues du backend : ${responseData.length} templates');
      if (responseData.isNotEmpty) {
        debugPrint('üìã Premier template re√ßu : ${responseData.first}');
      }

      // Convertir les donn√©es en objets TemplateFichecontrole
      final List<TemplateFichecontrole> templates = responseData
          .map((json) => TemplateFichecontrole.fromJson(json as Map<String, dynamic>))
          .toList();

      _templates.assignAll(templates);

      // V√©rifier si des donn√©es ont √©t√© r√©cup√©r√©es
      if (_templates.isEmpty) {
        _setEmptyState();
      }

      debugPrint('‚úÖ ${_templates.length} templates charg√©s pour l\'activit√© sp√©cifique');

    } catch (e) {
      _handleError('Erreur lors de la r√©cup√©ration des templates', e);
    } finally {
      _setLoadingState(false);
    }
  }

  /// Cr√©e un nouveau template
  Future<bool> createTemplate(TemplateFichecontrole template) async {
    try {
      _setCreatingState(true);
      _clearError();

      debugPrint('üîÑ Cr√©ation du template : ${template.nom}');

      final response = await _templateService.createTemplateFichecontrole(template.toJson());

      if (response != null) {
        final newTemplate = TemplateFichecontrole.fromJson(response);
        _templates.add(newTemplate);
        
        debugPrint('‚úÖ Template cr√©√© avec succ√®s : ${newTemplate.nom}');
        _showSuccessSnackbar('Template cr√©√© avec succ√®s');
        return true;
      } else {
        _handleError('Erreur lors de la cr√©ation du template', 'R√©ponse null du serveur');
        return false;
      }

    } catch (e) {
      _handleError('Erreur lors de la cr√©ation du template', e);
      return false;
    } finally {
      _setCreatingState(false);
    }
  }

  /// Met √† jour un template existant
  Future<bool> updateTemplate(TemplateFichecontrole template) async {
    if (template.id == null) {
      _handleError('Erreur de mise √† jour', 'ID du template manquant');
      return false;
    }

    try {
      _setUpdatingState(true);
      _clearError();

      debugPrint('üîÑ Mise √† jour du template : ${template.nom}');

      final response = await _templateService.updateTemplateFichecontrole(
        template.id!,
        template.toJson(),
      );

      if (response != null) {
        final updatedTemplate = TemplateFichecontrole.fromJson(response);
        final index = _templates.indexWhere((t) => t.id == template.id);
        
        if (index != -1) {
          _templates[index] = updatedTemplate;
        }

        // Mettre √† jour le template s√©lectionn√© si c'est le m√™me
        if (_selectedTemplate.value?.id == template.id) {
          _selectedTemplate.value = updatedTemplate;
        }
        
        debugPrint('‚úÖ Template mis √† jour avec succ√®s : ${updatedTemplate.nom}');
        _showSuccessSnackbar('Template mis √† jour avec succ√®s');
        return true;
      } else {
        _handleError('Erreur lors de la mise √† jour du template', 'R√©ponse null du serveur');
        return false;
      }

    } catch (e) {
      _handleError('Erreur lors de la mise √† jour du template', e);
      return false;
    } finally {
      _setUpdatingState(false);
    }
  }

  /// Supprime un template
  Future<bool> deleteTemplate(int templateId) async {
    try {
      _setDeletingState(true);
      _clearError();

      debugPrint('üîÑ Suppression du template ID: $templateId');

      final success = await _templateService.deleteTemplateFichecontrole(templateId);

      if (success) {
        _templates.removeWhere((t) => t.id == templateId);
        
        // D√©s√©lectionner si c'√©tait le template s√©lectionn√©
        if (_selectedTemplate.value?.id == templateId) {
          _selectedTemplate.value = null;
        }
        
        debugPrint('‚úÖ Template supprim√© avec succ√®s');
        _showSuccessSnackbar('Template supprim√© avec succ√®s');
        return true;
      } else {
        _handleError('Erreur lors de la suppression du template', 'Op√©ration √©chou√©e');
        return false;
      }

    } catch (e) {
      _handleError('Erreur lors de la suppression du template', e);
      return false;
    } finally {
      _setDeletingState(false);
    }
  }

  /// R√©cup√®re un template sp√©cifique par son ID
  Future<TemplateFichecontrole?> getTemplateById(int templateId) async {
    try {
      _clearError();

      debugPrint('üîç R√©cup√©ration du template ID: $templateId');

      final response = await _templateService.getTemplateFichecontroleById(templateId);

      if (response != null) {
        final template = TemplateFichecontrole.fromJson(response);
        _selectedTemplate.value = template;
        
        debugPrint('‚úÖ Template r√©cup√©r√© : ${template.nom}');
        return template;
      } else {
        _handleError('Template non trouv√©', 'Template avec ID $templateId introuvable');
        return null;
      }

    } catch (e) {
      _handleError('Erreur lors de la r√©cup√©ration du template', e);
      return null;
    }
  }

  /// T√©l√©charge un fichier template
  Future<bool> downloadTemplate(TemplateFichecontrole template) async {
    try {
      _clearError();

      debugPrint('üì• T√©l√©chargement du template : ${template.nom}');

      final response = await _templateService.downloadTemplateFichier(template.fichier);

      if (response != null && response.statusCode == 200) {
        debugPrint('‚úÖ Template t√©l√©charg√© avec succ√®s');
        _showSuccessSnackbar('Template t√©l√©charg√© avec succ√®s');
        return true;
      } else {
        _handleError('Erreur de t√©l√©chargement', 'Impossible de t√©l√©charger le fichier');
        return false;
      }

    } catch (e) {
      _handleError('Erreur lors du t√©l√©chargement', e);
      return false;
    }
  }

  /// Rafra√Æchit les donn√©es
  Future<void> refreshTemplates() async {
    _clearError();
    if (_selectedActiviteSpecifiqueId.value != null) {
      await fetchTemplatesByActiviteSpecifique(_selectedActiviteSpecifiqueId.value!);
    }
  }

  /// S√©lectionne un template
  void selectTemplate(TemplateFichecontrole template) {
    _selectedTemplate.value = template;
    debugPrint('üìå Template s√©lectionn√© : ${template.nom}');
  }

  /// D√©s√©lectionne le template actuel
  void clearSelection() {
    _selectedTemplate.value = null;
    debugPrint('üîÑ S√©lection de template effac√©e');
  }

  /// Met √† jour la requ√™te de recherche
  void updateSearchQuery(String query) {
    _searchQuery.value = query.toLowerCase();
    debugPrint('üîç Recherche mise √† jour : $query');
  }

  /// Met √† jour le filtre de type
  void updateTypeFilter(TypeTemplate? type) {
    _selectedTypeFilter.value = type;
    debugPrint('üîß Filtre de type mis √† jour : ${type?.displayName ?? 'Tous'}');
  }

  /// Efface tous les filtres
  void clearFilters() {
    _searchQuery.value = '';
    _selectedTypeFilter.value = null;
    debugPrint('üîÑ Filtres effac√©s');
  }

  /// V√©rifie la disponibilit√© des templates
  Future<bool> checkTemplateAvailability() async {
    if (_selectedActiviteSpecifiqueId.value == null) return false;
    return await _templateService.isTemplateAvailable(_selectedActiviteSpecifiqueId.value!);
  }

  /// Obtient le nombre de templates
  Future<int> getTemplateCount() async {
    if (_selectedActiviteSpecifiqueId.value == null) return 0;
    return await _templateService.countTemplatesByActiviteSpecifique(_selectedActiviteSpecifiqueId.value!);
  }

  /// Filtre les templates selon les crit√®res actuels
  List<TemplateFichecontrole> _getFilteredTemplates() {
    List<TemplateFichecontrole> filtered = List.from(_templates);

    // Filtre par recherche
    if (_searchQuery.value.isNotEmpty) {
      filtered = filtered.where((template) =>
          template.nom.toLowerCase().contains(_searchQuery.value)).toList();
    }

    // Filtre par type
    if (_selectedTypeFilter.value != null) {
      filtered = filtered.where((template) =>
          template.typeTemplate == _selectedTypeFilter.value).toList();
    }

    return filtered;
  }

  /// Met √† jour l'√©tat de chargement
  void _setLoadingState(bool loading) {
    _isLoading.value = loading;
  }

  /// Met √† jour l'√©tat de cr√©ation
  void _setCreatingState(bool creating) {
    _isCreating.value = creating;
  }

  /// Met √† jour l'√©tat de mise √† jour
  void _setUpdatingState(bool updating) {
    _isUpdating.value = updating;
  }

  /// Met √† jour l'√©tat de suppression
  void _setDeletingState(bool deleting) {
    _isDeleting.value = deleting;
  }

  /// G√®re les erreurs
  void _handleError(String message, dynamic error) {
    _hasError.value = true;
    _errorMessage.value = message;
    
    debugPrint('‚ùå $message: $error');
    _showErrorSnackbar(message);
  }

  /// Efface l'√©tat d'erreur
  void _clearError() {
    _hasError.value = false;
    _errorMessage.value = '';
  }

  /// D√©finit l'√©tat vide
  void _setEmptyState() {
    _errorMessage.value = "Aucun template fiche contr√¥le trouv√© pour cette activit√©";
  }

  /// Affiche un snackbar d'erreur
  void _showErrorSnackbar(String message) {
    Get.snackbar(
      'Erreur',
      message,
      snackPosition: SnackPosition.BOTTOM,
      backgroundColor: Colors.red.shade100,
      colorText: Colors.red.shade800,
      icon: const Icon(Icons.error_outline, color: Colors.red),
      duration: const Duration(seconds: 4),
    );
  }

  /// Affiche un snackbar de succ√®s
  void _showSuccessSnackbar(String message) {
    Get.snackbar(
      'Succ√®s',
      message,
      snackPosition: SnackPosition.BOTTOM,
      backgroundColor: Colors.green.shade100,
      colorText: Colors.green.shade800,
      icon: const Icon(Icons.check_circle_outline, color: Colors.green),
      duration: const Duration(seconds: 3),
    );
  }

  /// R√©essaie le chargement des donn√©es
  Future<void> retryLoading() async {
    await refreshTemplates();
  }

  @override
  void onClose() {
    // Nettoyage des ressources si n√©cessaire
    super.onClose();
  }
}